#!/command/with-contenv bash
# shellcheck shell=bash
#####################################
# All rights reserved.              #
# started from Zero                 #
# Docker owned dockserver           #
# Docker Maintainer dockserver      #
#####################################
# THIS DOCKER IS UNDER LICENSE      #
# NO CUSTOMIZING IS ALLOWED         #
# NO REBRANDING IS ALLOWED          #
# NO CODE MIRRORING IS ALLOWED      #
#####################################

function log() {
   echo "[Mount] ${1}"
}

#SETTINGS
ENDCONFIG=/app/rclone/rclone.conf
SOURCECONFIG=/system/rclone/rclone.conf
ENDFILE=/system/mount/drive.csv
ENVA=/system/mount/mount.env
TMPENV=/tmp/mount.env
SAMPLEENV=/app/sample/.sample.mount.env
TMPHOSTS=/tmp/hosts
HOSTS=/etc/hosts

#FOLDER
SUNION=/mnt/unionfs
SMOUNT=/app/mount
SREMOTES=/mnt/remotes
SDOWN=/mnt/downloads
TMPRCLONE=${TMPRCLONE}
LOGS=/system/mount/logs
JSONDIR=/system/mount/keys
USEDDIR=/system/mount/.keys
JSONUSED=/system/mount/.keys/usedkeys
JSONDIRUPLOADER=/system/servicekeys/keys
ARRAY=$($(which ls) -A "${JSONDIR}" | $(which wc) -l)

   $(which cat) >> /etc/apk/repositories << EOF; $(echo)
http://dl-cdn.alpinelinux.org/alpine/edge/testing
EOF

$(which sed) -i 's/#user_allow_other/user_allow_other/' "/etc/fuse.conf" &>/dev/null

log "**** update system packages ****" && \
   apk --quiet --no-progress update && \
   apk --quiet --no-progress upgrade

log "**** install build packages from requirements ****" && \
   $(which cat) /app/requirements.txt | while IFS=$'\n' read -ra myArray; do
      apk add --quiet --no-progress --update "${myArray[@]}"
   done

log "**** install pip packages ****"
   pip3 install --no-cache-dir --break-system-packages -U apprise &>/dev/null

log "**** creating folders ****"
   $(which mkdir) -p /system/mount/.keys \
           /system/mount/{logs,keys} \
           /app/rclone \
           /root/.config/rclone/ &>/dev/null

DRIVESPACE=$($(which df) -BG /mnt --local | $(which tail) -n +2 | $(which awk) '{print $4}' | $(which sed) -e 's/G//g')
CHECKSPACE=$($(which echo) $(((${DRIVESPACE}) / 4 | bc)) | $(which sed) -r 's/([^0-9]*([0-9]*)){1}.*/\2/')

VFS_CACHE_MAX_SIZE=${VFS_CACHE_MAX_SIZE:-null}
if [[ "${VFS_CACHE_MAX_SIZE}" == "null" ]]; then
   VFS_CACHE_MAX_SIZE=${CHECKSPACE}G
else
   VFS_CACHE_MAX_SIZE="${VFS_CACHE_MAX_SIZE}"
   $(which sed) -i "s#VFS_CACHE_MAX_SIZE=G#VFS_CACHE_MAX_SIZE=50G#g" "${ENVA}"
fi

UAGENT=${UAGENT:-null}
if [[ "${UAGENT}" == "null" ]]; then
   UAGENT=$($(which cat) /dev/urandom | $(which tr) -dc 'a-zA-Z0-9' | $(which fold) -w 32 | $(which head) -n 1)
else
   UAGENT="${UAGENT}"
fi

if [[ ! -f "${ENVA}" ]]; then
   $(which mv) "${SAMPLEENV}" "${TMPENV}"
else
   $(which mv) "${ENVA}" "${TMPENV}"
fi

source "${TMPENV}"

$(which echo) -e "#-------------------------------------------------------
#   MOUNT ENVIRONMENT
#-------------------------------------------------------
## USER VALUES
PUID=${PUID:-1000}
PGID=${PGID:-1000}
TIMEZONE=${TZ:-UTC}

## CRITICAL SETUP FOR CRYPT USER
HASHPASSWORD=${HASHPASSWORD:-hashed}

## MERGERFS ADDITIONAL FOLDER
ADDITIONAL_MOUNT=${ADDITIONAL_MOUNT:-null}
ADDITIONAL_MOUNT_PERMISSION=${ADDITIONAL_MOUNT_PERMISSION:-RW}

## RCLONE - SETTINGS
GOOGLE_IP=${GOOGLE_IP:-142.250.201.202}
PROXY=\"${PROXY:-null}\"
UMASK=${UMASK:-18}
DRIVETRASH=${DRIVETRASH:-false}
BUFFER_SIZE=${BUFFER_SIZE:-32M}
TMPRCLONE=${TMPRCLONE:-/mnt/rclone_cache}
UAGENT=${UAGENT}
TPSLIMIT=${TPSLIMIT:-10}
TPSBURST=${TPSBURST:-0}
DEFAULT_TIME=${DEFAULT_TIME:-2020-01-01T00:00:00Z}
RUNION=${RUNION:-true}

## VFS - SETTINGS
VFS_READ_CHUNK_SIZE=${VFS_READ_CHUNK_SIZE:-128M}
VFS_READ_CHUNK_SIZE_LIMIT=${VFS_READ_CHUNK_SIZE_LIMIT:-4096M}
VFS_CACHE_MAX_SIZE=${VFS_CACHE_MAX_SIZE}
VFS_CACHE_MAX_AGE=${VFS_CACHE_MAX_AGE:-6h}
VFS_DIR_CACHE_TIME=${VFS_DIR_CACHE_TIME:-9999h}

## LOG - SETTINGS
LOG_LEVEL=${LOG_LEVEL:-INFO}

## NOTIFICATION - SETTINGS
NOTIFICATION_URL=${NOTIFICATION_URL:-null}
NOTIFICATION_SERVERNAME=${NOTIFICATION_SERVERNAME:-null}

## NZB CLEANUP-CONTROLLE
NZBCLEANUP=${NZBCLEANUP:-false}
DRIVEUSEDPERCENT=${DRIVEUSEDPERCENT:-75}
NZBBACKUPFOLDER=${NZBBACKUPFOLDER:-/mnt/nzb}
NZBBACKUPTIME=${NZBBACKUPTIME:-240}
NZBDOWNLOADFOLDER=${NZBDOWNLOADFOLDER:-/mnt/downloads/nzb}
NZBDOWNLOADFOLDERTIME=${NZBDOWNLOADFOLDERTIME:-10800}

## LANGUAGE MESSAGES
LANGUAGE=${LANGUAGE:-en}

#-------------------------------------------------------
#   MOUNT ENVIRONMENT
#-------------------------------------------------------" > "${ENVA}"

if [[ -f "${TMPENV}" ]]; then $(which rm) -f "${TMPENV}"; fi

source "${ENVA}"
if [[ ! -d "${USEDDIR}" ]]; then $(which mkdir) -p "${USEDDIR}" && $(which chown) -hR abc:abc "${USEDDIR}" &>/dev/null; fi
if [[ ! -d "${TMPRCLONE}" ]]; then $(which mkdir) -p "${TMPRCLONE}" && $(which chown) -hR abc:abc "${TMPRCLONE}" && $(which chmod) -R 775 "${TMPRCLONE}" &>/dev/null; fi
if [[ ! -d "${SUNION}" ]]; then $(which mkdir) -p "${SUNION}" && $(which chown) -hR abc:abc "${SUNION}" && $(which chmod) -R 775 "${SUNION}" &>/dev/null; fi
if [[ ! -d "${SREMOTES}" ]]; then $(which mkdir) -p "${SREMOTES}" && $(which chown) -hR abc:abc "${SREMOTES}" && $(which chmod) -R 775 "${SREMOTES}" &>/dev/null; fi
if [[ ! -d "${SDOWN}" ]]; then $(which mkdir) -p "${SDOWN}" && $(which chown) -hR abc:abc "${SDOWN}" && $(which chmod) -R 775 "${SDOWN}" &>/dev/null; fi
if [[ -d "${TMPRCLONE}" ]]; then $(which fusermount3) -uzq "${TMPRCLONE}" &>/dev/null; fi
if [[ -d "${SUNION}" ]]; then $(which fusermount3) -uzq "${SUNION}" &>/dev/null; fi
mapfile -t fod < <($(which ls) -d ${SREMOTES}/* 2>/dev/null)
for FOLDER in ${fod[@]}; do
   $(which fusermount3) -uzq "${FOLDER}"
done
if [[ -d "${SREMOTES}" ]]; then $(which fusermount3) -uzq "${SREMOTES}" &>/dev/null; fi
if [[ -f "${ENDCONFIG}" ]]; then $(which rm) -f "${ENDCONFIG}" &>/dev/null; fi
$(which find) "${SREMOTES}" -mindepth 1 -type d -empty -delete
$(which sed) -i 's/UMASK=022/UMASK=18/' "${ENVA}" &>/dev/null

# CHECK MOUNT KEYS ARE NOT UPLOADER KEYS
if [[ "${ARRAY}" -ge "1" ]]; then
   KEYMOUNT=$($(which ls) -A "${JSONDIR}" | $(which sort) -V | $(which head) -n 1 2>/dev/null)
   KEYUPLOADER=$($(which ls) -A "${JSONDIRUPLOADER}" | $(which sort) -V | $(which head) -n 1 2>/dev/null)
   $(which cmp) -s "${JSONDIR}/${KEYMOUNT}" "${JSONDIRUPLOADER}/${KEYUPLOADER}"
   if [[ "$?" -eq "0" ]]; then 
      log "-> You are using your Uploader Keys! Generate Keys only for Mount! <-"
      $(which sleep) infinity
   fi
fi

# MOUNT KEYS
if [[ "${ARRAY}" -ge "1" ]]; then
   if [[ ! -f "${JSONUSED}" ]]; then
      $(which ls) -A "${JSONDIR}" | $(which sort) -V > "${JSONUSED}"
   else
      ARRAYJSON=$($(which cat) "${JSONUSED}" | $(which wc) -l)
      if [[ "${ARRAY}" != "${ARRAYJSON}" ]]; then
         $(which rm) -rf "${JSONUSED}" && $(which ls) -A "${JSONDIR}" | $(which sort) -V > "${JSONUSED}"
      fi
   fi
fi

# RCLONE.CONF without KEYS
if [[ -f "${SOURCECONFIG}" && "${ARRAY}" -lt "1" ]]; then
   cp "${SOURCECONFIG}" "${ENDCONFIG}"
   $(which rclone) config delete remote --config="${ENDCONFIG}" &>/dev/null
   #### REMOVE GDSA ENTRY IN ENDCONFIG ####
   GDSACHECK=$($(which rclone) config dump --config="${ENDCONFIG}" | $(which jq) -r 'to_entries | (.[] | select(.key | contains("GDSA"))) | .key')
   if [[ "${GDSACHECK}" != "" ]]; then
      mapfile -t GDSA < <($(which rclone) config dump --config="${ENDCONFIG}" | $(which jq) -r 'to_entries | (.[] | select(.key | contains("GDSA"))) | .key')
      for NAME in ${GDSA[@]}; do
         $(which rclone) config delete "${NAME}" --config="${ENDCONFIG}" &>/dev/null
      done
   fi
   $(which rclone) config show --config="${ENDCONFIG}"
fi

# CREATE CSV
if [[ -f "${SOURCECONFIG}" && -f "${ENDFILE}" ]]; then
   DRIVERC=$($(which rclone) config dump --config="${SOURCECONFIG}" | $(which jq) -r 'to_entries | (.[] | select(.value.type=="drive")) | .key' | $(which wc) -l)
   DRIVECSV=$($(which cat) "${ENDFILE}" | $(which wc) -l)
   if [[ "${DRIVERC}" -gt "${DRIVECSV}" ]]; then 
      $(which rm) -f "${ENDFILE}"
   fi
fi
if [[ ! -f "${ENDFILE}" && -f "${SOURCECONFIG}" && "${ARRAY}" -ge "1" ]]; then
   mapfile -t mounts < <($(which rclone) config dump --config="${SOURCECONFIG}" | $(which jq) -r 'to_entries | (.[] | select(.value.type=="drive")) | .key')
   for REMOTE in ${mounts[@]}; do
      TDID=$($(which rclone) config dump --config="${SOURCECONFIG}" | $(which jq) -r --arg REMOTE "${REMOTE}" 'to_entries | (.[] | select(.key==$REMOTE)) | .value.team_drive')
      GETP=$($(which rclone) config dump --config="${SOURCECONFIG}" | $(which jq) -r --arg REMOTE "${REMOTE}" 'to_entries | (.[] | select(.value.remote=="'"$REMOTE:/encrypt"'")) | .value.password')
      GETS=$($(which rclone) config dump --config="${SOURCECONFIG}" | $(which jq) -r --arg REMOTE "${REMOTE}" 'to_entries | (.[] | select(.value.remote=="'"$REMOTE:/encrypt"'")) | .value.password2')
      if [[ "${GETP}" != "" && "${GETS}" != "" ]]; then
         $(which echo) -e "${REMOTE}|${TDID}|${GETP}|${GETS}" >> "${ENDFILE}"
      else
         $(which echo) -e "${REMOTE}|${TDID}" >> "${ENDFILE}"
      fi
   done
fi

# DRIVE.CSV
if [[ -f "${ENDFILE}" && "${ARRAY}" -ge "1" ]]; then
   $(which awk) '$1~search {p=1} NF==0 {p=0}; p' search="DB|DBC" "${SOURCECONFIG}" >> "${ENDCONFIG}"
   $(which awk) '$1~search {p=1} NF==0 {p=0}; p' search="gdrive|gcrypt" "${SOURCECONFIG}" >> "${ENDCONFIG}"
   $(which rclone) config show --config="${ENDCONFIG}"
   KEY=$($(which sed) -n 1p "${JSONUSED}")
   $(which sed) '/^\s*#.*$/d' "${ENDFILE}" | while IFS=$'|' read -r -a myArray; do
      if [[ "${myArray[2]}" == "" && "${myArray[3]}" == "" ]]; then
         $(which rclone) config create "${myArray[0]}" drive scope=drive server_side_across_configs=true team_drive="${myArray[1]}" service_account_file="${JSONDIR}/${KEY}" service_account_file_path="${JSONDIR}" --config="${ENDCONFIG}"
      else
         if [[ "${HASHPASSWORD}" == "plain" && "${HASHPASSWORD}" != "hashed" ]]; then
            ENC_PASSWORD=$($(which rclone) obscure "${myArray[2]}" | $(which tail) -n1)
            ENC_SALT=$($(which rclone) obscure "${myArray[3]}" | $(which tail) -n1)
         else
            ENC_PASSWORD="${myArray[2]}"
            ENC_SALT="${myArray[3]}"
         fi
         $(which rclone) config create "${myArray[0]}" drive scope=drive server_side_across_configs=true team_drive="${myArray[1]}" service_account_file="${JSONDIR}/${KEY}" service_account_file_path="${JSONDIR}" --config="${ENDCONFIG}"
         $(which rclone) config create "${myArray[0]}"-crypt crypt remote="${myArray[0]}":/encrypt filename_encryption=standard directory_name_encryption=true password="${ENC_PASSWORD}" password2="${ENC_SALT}" --config="${ENDCONFIG}"
      fi
   done
fi

# DUMMY
if [[ "${RUNION}" == "true" ]]; then
   DUMMYCHECK=$($(which rclone) config dump --config="${ENDCONFIG}" | $(which jq) -r 'to_entries | (.[] | select(.value)) | .key' | $(which wc) -l)
   if [[ "${DUMMYCHECK}" == "1" ]]; then
      $(which mkdir) -p /dummy &>/dev/null
      $(which rclone) config create "dummy" alias remote="/dummy" --config="${ENDCONFIG}" &>/dev/null
   fi
fi

# RCLONE UNION PART
if [[ "${RUNION}" == "true" ]]; then
   TMPUNION=/tmp/rcunion.union
   if [[ -f "${TMPUNION}" ]]; then rm -rf "${TMPUNION}"; fi
   mapfile -t mounts < <($(which rclone) config dump --config="${ENDCONFIG}" | $(which jq) -r 'to_entries | (.[] | select(.value)) | .key')
   i=0
   for REMOTE in ${mounts[@]}; do
      CHECKCRYPT=$($(which rclone) config dump --config="${ENDCONFIG}" | $(which jq) -r --arg REMOTE "${REMOTE}" 'to_entries | (.[] | select(.value.remote | index($REMOTE))) | .key')
      if [[ "${CHECKCRYPT}" == "" ]]; then
         ((i=i+1))
         $(which echo) -n "${REMOTE}: " >> "${TMPUNION}"
      fi
   done
   # DUMMY
   if [[ "${i}" == "1" ]]; then
      $(which mkdir) -p /dummy &>/dev/null
      $(which rclone) config create "dummy" local --config="${ENDCONFIG}" &>/dev/null
      $(which echo) -n "dummy:/dummy:ro " >> "${TMPUNION}"
   fi
   TMPUNIONFILE=$($(which cat) "${TMPUNION}")
   $(which rclone) config create remote union upstreams "${TMPUNIONFILE}" action_policy 'all' create_policy 'all' search_policy 'all' cache_time 120 --config="${ENDCONFIG}"
fi

mount --bind /app/rclone/ /root/.config/rclone/

$(which rm) -rf "${TMPENV}" && cp "${ENVA}" "${TMPENV}"

if [[ "${GOOGLE_IP}" == "" ]]; then
   GOOGLE_IP="null"
fi
if [[ "${GOOGLE_IP}" != "null" ]]; then
   $(which cp) "${HOSTS}" "${TMPHOSTS}" &>/dev/null
   $(which sed) -i '/www.googleapis.com/d' "${TMPHOSTS}" &>/dev/null
   $(which cp) -f "${TMPHOSTS}" "${HOSTS}" &>/dev/null
   readarray -t GIP < <($(which awk) -F',' '{ for( i=1; i<=NF; i++ ) print $i }' <<<"${GOOGLE_IP}")
      for ENTRY in "${GIP[@]}"; do
         $(which echo) -e "${ENTRY} www.googleapis.com" >> "${HOSTS}"
      done
fi

$(which echo) "------------------------------
    _____   _   _  __  __
   |_   _| | | | | \ \/ /
     | |   | |_| |  \  / 
     | |   |  _  |  /  \ 
     |_|   |_| |_| /_/\_\

------------------------------
     to all the coders

We have take some code from :

  88lex , RTRO , edrock200
 ChaoticWeg & linuxserver.io

       and all other
  If we missed you, sorry..
------------------------------"

log "**** set permissions ****"
$(which chmod) -cR 777 \
   /system \
   /app \
   /root \
   $(which rclone) \
   $(which mergerfs) &>/dev/null

$(which chmod) -cR 644 /etc/logrotate.d &>/dev/null

$(which chown) -cR abc:abc \
   /system \
   /app \
   /root \
   $(which rclone) \
   $(which mergerfs) &>/dev/null

$(which chmod) u+s $(which rclone) &>/dev/null
$(which chmod) u+s $(which mergerfs) &>/dev/null

log "**** cleannup ****"
   $(which rm) -rf /var/cache/apk/*

#### END OF FILE ####
