#!/bin/bash
####################################
# All rights reserved.              #
# started from Zero                 #
# Docker owned dockserver           #
# Docker Maintainer dockserver      #
#####################################
#####################################
# THIS DOCKER IS UNDER LICENSE      #
# NO CUSTOMIZING IS ALLOWED         #
# NO REBRANDING IS ALLOWED          #
# NO CODE MIRRORING IS ALLOWED      #
#####################################
# shellcheck disable=SC2086
# shellcheck disable=SC2046

FOLDER=$1
APP=$2
USERNAME=$3
TOKEN=$4

### APP SETTINGS ###

APPLINK="https://api.github.com/repos/cloudflare/cloudflared"
NEWVERSION=$(curl -u $USERNAME:$TOKEN -sX GET "https://api.github.com/repos/cloudflare/cloudflared/tags" | jq -r '.[0] .name')
NEWVERSION="${NEWVERSION#*v}"
NEWVERSION="${NEWVERSION#*release-}"
NEWVERSION="${NEWVERSION}"

## BUILDSTAGEIMAGE
BUILDSTAGE=$(curl -sX GET "https://registry.hub.docker.com/v1/repositories/library/alpine/tags" \
   | jq --raw-output '.[] | select(.name | contains(".")) | .name' \
   | sort -t "." -k1,1n -k2,2n -k3,3n | tail -n1)
BUILDSTAGE="${BUILDSTAGE#*v}"
BUILDSTAGE="${BUILDSTAGE#*release-}"
BUILDSTAGE="${BUILDSTAGE}"
BUILDERSTAGE="--from=builder --chown=nonroot /go/src/github.com/cloudflare/cloudflared/cloudflared /usr/local/bin/"

## APPS STAGE
GOLANG_VERSION="1.17.2"
COPYSTAGE="--from=stage /tmp/cloudflared /go/src/github.com/cloudflare/cloudflared/"
RUNWOKRDIR="/go/src/github.com/cloudflare/cloudflared/"
RUNCOMMAND="make cloudflared"

## CLOUDFLARED
FINALIMAGE="gcr.io/distroless/base-debian10:nonroot"
INSTCOMMAND="apk add -U --update --no-cache"
PACKAGES="git"
DLAPP="git clone -q https://github.com/cloudflare/cloudflared.git /tmp/cloudflared"
DESCRIPTION="$(curl -u $USERNAME:$TOKEN -sX GET "$APPLINK" | jq -r '.description')"
HEADLINE="$(cat ./.templates/headline.txt)"

BASEIMAGE="alpine"
PICTURE="./images/$APP.png"

### RELEASE SETTINGS ###

echo '{
   "appname": "'${APP}'",
   "apppic": "'${PICTURE}'",
   "appfolder": "./'$FOLDER'/'$APP'",
   "newversion": "'${NEWVERSION}'",
   "baseimage": "'${BASEIMAGE}'",
   "description": "'${DESCRIPTION}'",
   "body": "Upgrading '${APP}' to '${NEWVERSION}'",
   "user": "github-actions[bot]"
}' > "./$FOLDER/$APP/release.json"


### DOCKER BUILD ###
### GENERATE Dockerfile based on release.json

echo '## This file is automatically generated (based on release.json)
##
## Do not changes any lines here
##
'"${HEADLINE}"'
FROM alpine:'"${BUILDSTAGE}"' as stage

LABEL org.opencontainers.image.source="'"https://github.com/dockserver/container"'"

ARG TARGETPLATFORM
ARG BUILDPLATFORM

ARG ALPINE_VERSION='"${BUILDSTAGE}"'
ARG GOLANG_VERSION='"${GOLANG_VERSION}"'

RUN echo "'"**** install packages ****"'" && \
    '"${INSTCOMMAND}"' '"${PACKAGES}"' && \
    '"${DLAPP}"'

ARG TARGET_GOOS
ARG TARGET_GOARCH
ARG VERSION

## BUILDER STAGE

FROM golang:'"${GOLANG_VERSION}"' as builder
ENV GO111MODULE=on \
    CGO_ENABLED=0 \
    TARGET_GOOS="$TARGET_GOOS" \
    TARGET_GOARCH="$TARGET_GOARCH"

COPY '"${COPYSTAGE}"'

WORKDIR '"${RUNWOKRDIR}"'
RUN '"${RUNCOMMAND}"'

FROM '"${FINALIMAGE}"'

COPY '"${COPYSTAGE}"'
COPY '"${BUILDERSTAGE}"'

USER nonroot
ENTRYPOINT ["'"/cloudflared"'"/, "'"/--no-autoupdate"'"/]
CMD ["'"/version"'"]
##EOF' > ./$FOLDER/$APP/Dockerfile
