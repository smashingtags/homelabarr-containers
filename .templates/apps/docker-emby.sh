#!/bin/bash
####################################
# All rights reserved.              #
# started from Zero                 #
# Docker owned dockserver           #
# Docker Maintainer dockserver      #
#####################################
#####################################
# THIS DOCKER IS UNDER LICENSE      #
# NO CUSTOMIZING IS ALLOWED         #
# NO REBRANDING IS ALLOWED          #
# NO CODE MIRRORING IS ALLOWED      #
#####################################
# shellcheck disable=SC2086
# shellcheck disable=SC2046

FOLDER=$1
APP=$2
USERNAME=$3
TOKEN=$4

### APP SETTINGS ###

APPBRANCH="master"
APPLINK="https://github.com/MediaBrowser/Emby"
NEWVERSION=$(curl -u $USERNAME:TOKEN -sX GET https://api.github.com/repos/MediaBrowser/Emby.Releases/releases/latest | jq --raw-output '. | .tag_name')
NEWVERSION="${NEWVERSION#*v}"
NEWVERSION="${NEWVERSION#*release-}"
NEWVERSION="${NEWVERSION}"

assets=$(curl -u $USERNAME:TOKEN -sX GET "https://api.github.com/repos/MediaBrowser/Emby.Releases/releases/tags/${NEWVERSION}" | jq -r '.assets[].browser_download_url')
if echo "$assets"  | grep -q "x86_64.rpm$"; then
   echo "good we found it "
else
   echo "**** Not all artifacts are published yet, skipping trigger ****"
   exit 0
fi

HEADLINE="$(cat ./.templates/headline.txt)"

DESCRIPTION="Docker Container for Emby Server"
BASESTAGE="ghcr.io/linuxserver/baseimage-ubuntu:jammy as buildstage"
INSTCOMMAND="apt-get install -yqq"
UPTCOMMAND="apt-get update -yqq"

## BUILDSTAGE

BUILDSTAGE="--from=buildstage /app/emby /app/emby"
EMBY_URL="https://github.com/MediaBrowser/Emby.Releases/releases/download"
PACKAGESSTAGE="aria2 unrar  uuid-runtime cpio jq rpm2cpio"
PACKAGESINTEL="intel-opencl-icd i965-va-driver gpg-agent libmfx1 ocl-icd-libopencl1"
INSTEMBY="rpm2cpio emby.rpm | cpio -i --make-directories"
BASEMLINK="mv -t /app/emby \\
     /tmp/opt/emby-server/system/* \\
     /tmp/opt/emby-server/lib/* \\
     /tmp/opt/emby-server/extra/lib/* \\
     /tmp/opt/emby-server/bin/ff* \\
     /tmp/opt/emby-server/etc"

## FINALIMAGE
FINALIMAGE="ghcr.io/linuxserver/baseimage-ubuntu:jammy"
PACKAGESFINAL="aria2 jq unrar unzip curl uuid-runtime mesa-va-drivers"
PACKAGESINTEL="intel-opencl-icd intel-gpu-tools i965-va-driver-shaders va-driver-all mesa-vulkan-drivers gpg-agent libmfx1 ocl-icd-libopencl1"
CLEANUP="apt-get remove -yqq aria2 jq software-properties-common gpg-agent && \\
     apt-get autoremove -yqq && apt-get clean -yqq && \\
     rm -rf /tmp/* /var/lib/apt/lists/* /var/tmp/"

PICTURE="./images/$APP.png"
APPFOLDER="./$FOLDER/$APP"
PORT="EXPOSE 8096 8920"
VOLUMEN="VOLUME /config"

### RELEASE SETTINGS ###

echo '{
   "appname": "'${APP}'",
   "apppic": "'${PICTURE}'",
   "appfolder": "./'$FOLDER'/'$APP'",
   "newversion": "'${NEWVERSION}'",
   "appbranch": "'${APPBRANCH}'",
   "baseimage": "'${BASEIMAGE}'",
   "description": "'${DESCRIPTION}'",
   "body": "Upgrading '${APP}' to '${NEWVERSION}'",
   "user": "github-actions[bot]"
}' > "./$FOLDER/$APP/release.json"

## HAXK for Intel
echo '# Packages and Updates from the Hetzner Ubuntu Mirror
deb http://mirror.hetzner.com/ubuntu/packages jammy           main restricted universe multiverse
deb http://mirror.hetzner.com/ubuntu/packages jammy-updates   main restricted universe multiverse
deb http://mirror.hetzner.com/ubuntu/packages jammy-backports main restricted universe multiverse
deb http://mirror.hetzner.com/ubuntu/packages jammy-security  main restricted universe multiverse' > "./$FOLDER/$APP/root/etc/apt/sources.list.d/extra.list"


### DOCKER BUILD ###
### GENERATE Dockerfile based on release.json

echo '## This file is automatically generated (based on release.json)
##
## Do not changes any lines here
##
'"${HEADLINE}"'
FROM '"${BASESTAGE}"'
LABEL org.opencontainers.image.source="'"https://github.com/dockserver/container"'"

ARG TARGETPLATFORM
ARG BUILDPLATFORM
ARG VERSION="'"${NEWVERSION}"'"
ARG BRANCH="'"${APPBRANCH}"'"

ENV DEBIAN_FRONTEND="'"noninteractive"'"

RUN \
   echo "'"**** update runtime packages ****"'" && \
     '"${UPTCOMMAND}"' && \
   echo "'"**** install packages ****"'" && \
     '"${INSTCOMMAND}"' '"${PACKAGESSTAGE}"' && \
  echo "'"**** set arch for emby ****"'" && \
   case $TARGETPLATFORM in \
    "'"linux/amd64"'") export ARCH=x86_64 ;; \
    "'"linux/arm64"'") export ARCH=aarch64 ;; \
   esac \
   && \
  echo "'"**** install emby ****"'" && \
    mkdir -p /app/emby && \
    aria2c -d /tmp -o emby.rpm "'"${EMBY_URL}/"'${VERSION}'"/emby-server-rpm_"'${VERSION}'"_"'${ARCH}'".rpm"'" && \
    cd /tmp && '"${INSTEMBY}"' && \
    echo -e "'"UpdateMethod=docker\nBranch="'${BRANCH}'"\nPackageVersion="'${VERSION}'"\nPackageAuthor=[dockserver.io](https://dockserver.io)"'" > /app/package_info && \
  echo "'"**** unset arch ****"'" && \
    unset ARCH && \
  echo "'"**** cleanup ****"'" && \
    '"${BASEMLINK}"'

### FINALIMAGE
FROM '"${FINALIMAGE}"'

ARG TARGETPLATFORM
ARG BUILDPLATFORM
ARG VERSION

ENV NVIDIA_DRIVER_CAPABILITIES="'""'" \
    DEBIAN_FRONTEND="'"noninteractive"'"

RUN \
   case $TARGETPLATFORM in \
    '"'linux/amd64'"') \
         export NVIDIA_DRIVER_CAPABILITIES="'"compute,video,utility"'" && \
         export ARCH=amd64 && \
      echo "'"**** install runtime packages ****"'" && \
         '"${UPTCOMMAND}"' && \
      echo "'"**** install Intel packages ****"'" && \
         '"${INSTCOMMAND}"' '"${PACKAGESINTEL}"'; \
    ;; \
    '"'linux/arm64'"') export ARCH='arm64' && unset NVIDIA_DRIVER_CAPABILITIES ;; \
   esac \
   && \
   echo "'"**** install runtime packages ****"'" && \
     '"${UPTCOMMAND}"' && \
   echo "'"**** set permissions ****"'" && \
     usermod -d /app abc && \
  echo "'"**** cleanup ****"'" && \
     '"${CLEANUP}"'

COPY '"${BUILDSTAGE}"'
COPY --chown=abc '"${APPFOLDER}"'/root/ /

'"${PORT}"'

'"${VOLUMEN}"'
##EOF' > ./$FOLDER/$APP/Dockerfile
