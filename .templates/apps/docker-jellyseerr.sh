#!/bin/bash
####################################
# All rights reserved.              #
# started from Zero                 #
# Docker owned dockserver           #
# Docker Maintainer dockserver      #
#####################################
#####################################
# THIS DOCKER IS UNDER LICENSE      #
# NO CUSTOMIZING IS ALLOWED         #
# NO REBRANDING IS ALLOWED          #
# NO CODE MIRRORING IS ALLOWED      #
#####################################
# shellcheck disable=SC2086
# shellcheck disable=SC2046

FOLDER=$1
APP=$2
USERNAME=$3
TOKEN=$4

### APP SETTINGS ###

APPBRANCH=""
APPLINK="https://api.github.com/repos/Fallenbagel/jellyseerr"
NEWVERSION=$(curl -u $USERNAME:$TOKEN -sX GET "https://api.github.com/repos/Fallenbagel/jellyseerr/releases/latest" | jq --raw-output '.tag_name')
NEWVERSION="${NEWVERSION#*v}"
NEWVERSION="${NEWVERSION#*release-}"
NEWVERSION="${NEWVERSION}"

HEADLINE="$(cat ./.templates/headline.txt)"
DESCRIPTION="$(curl -u $USERNAME:$TOKEN -sX GET "$APPLINK" | jq -r '.description')"
BASEIMAGE="ghcr.io/dockserver/docker-alpine-v3:latest"

INSTCOMMAND="apk add -U --update --no-cache"
PACKAGES="yarn"
VIRTUEL="--virtual=build-dependencies build-base python3"

YARN="cd /app/jellyseerr && \\
    export NODE_OPTIONS=--max_old_space_size=2048 && \\
    CYPRESS_INSTALL_BINARY=0 yarn --frozen-lockfile --network-timeout 1000000 && \\
    yarn build && yarn install --production --ignore-scripts --prefer-offline && \\
    yarn cache clean"

LEFTOVER="rm -rf /app/jellyseerr/src /app/jellyseerr/server /app/jellyseerr/Dockerfile"

LINK2="rm -rf /app/jellyseerr/config && \\
    ln -s /config /app/jellyseerr/config && \\
    touch /config/DOCKER"

CLEANUP="apk del --purge build-dependencies && \\
    rm -rf /root/.cache /tmp/* /app/jellyseerr/.next/cache/*"

PICTURE="./images/$APP.png"
APPFOLDER="./$FOLDER/$APP"
PORT="EXPOSE 5055"
VOLUMEN="VOLUME /config"

### RELEASE SETTINGS ###

echo '{
   "appname": "'${APP}'",
   "apppic": "'${PICTURE}'",
   "appfolder": "./'$FOLDER'/'$APP'",
   "newversion": "'${NEWVERSION}'",
   "appbranch": "'${APPBRANCH}'",
   "baseimage": "'${BASEIMAGE}'",
   "description": "'${DESCRIPTION}'",
   "body": "Upgrading '${APP}' to '${NEWVERSION}'",
   "user": "github-actions[bot]"
}' > "./$FOLDER/$APP/release.json"

### DOCKER BUILD ###
### GENERATE Dockerfile based on release.json

echo '## This file is automatically generated (based on release.json)
##
## Do not changes any lines here
##
'"${HEADLINE}"'
FROM '"${BASEIMAGE}"'

LABEL org.opencontainers.image.source="'"https://github.com/dockserver/container"'"
ARG TARGETPLATFORM
ARG BUILDPLATFORM

ARG VERSION="'"${NEWVERSION}"'"
ARG BRANCH="'"${APPBRANCH}"'"
ENV HOME="'"/config"'"

RUN \
  echo "'"**** install packages ****"'" && \
    '"${INSTCOMMAND}"' '"${VIRTUEL}"' && \
  echo "'"**** install runtime packages ****"'" && \
    '"${INSTCOMMAND}"' '"${PACKAGES}"' && \
    export COMMIT_TAG="'"v${NEWVERSION}"'" && \
  echo "'"**** install '"${APP}"' ****"'" && \
    mkdir -p /app/jellyseerr && \
    curl -fsSL "'"https://github.com/Fallenbagel/jellyseerr/archive/refs/tags/v"'${VERSION}'".tar.gz"'" | tar xzf - -C /app/jellyseerr --strip-components=1 && \
    '"${YARN}"' && \
    '"${LEFTOVER}"' && \
  echo "{\"commitTag\": \"${COMMIT_TAG}\"}" > committag.json && \
    '"${LINK2}"' && \
  echo "'"**** cleanup ****"'" && \
    '"${CLEANUP}"'

COPY --chown=abc '"${APPFOLDER}"'/root/ /

'"${PORT}"'
'"${VOLUMEN}"'

##EOF' > ./$FOLDER/$APP/Dockerfile
