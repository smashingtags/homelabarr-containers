name: Release

on:
  push:
    branches:
      - main
      - dev

permissions:
  contents: write
  pull-requests: write
  packages: write

jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      release_tag_name: ${{ steps.release.outputs.tag_name }}
      release_version: ${{ steps.release.outputs.version }}
      release_major: ${{ steps.release.outputs.major }}
      release_minor: ${{ steps.release.outputs.minor }}
      release_patch: ${{ steps.release.outputs.patch }}
    steps:
      - name: Release Please
        id: release
        uses: google-github-actions/release-please-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          release-type: simple
          config-file: release-please-config.json
          
  tag-containers:
    needs: release-please
    if: needs.release-please.outputs.release_created == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: smashingtags
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Tag all containers with version
        env:
          VERSION: ${{ needs.release-please.outputs.release_version }}
          MAJOR: ${{ needs.release-please.outputs.release_major }}
          MINOR: ${{ needs.release-please.outputs.release_minor }}
        run: |
          # List all containers that have been built
          CONTAINERS=$(find apps/ base/ mod/ -maxdepth 1 -type d -exec basename {} \; | grep -E '^homelabarr-' | sort -u)
          
          for CONTAINER in $CONTAINERS; do
            echo "Tagging $CONTAINER with version $VERSION"
            
            # Pull the latest image
            docker pull ghcr.io/smashingtags/${CONTAINER}:latest || continue
            
            # Tag with semantic versions
            docker tag ghcr.io/smashingtags/${CONTAINER}:latest ghcr.io/smashingtags/${CONTAINER}:v${VERSION}
            docker tag ghcr.io/smashingtags/${CONTAINER}:latest ghcr.io/smashingtags/${CONTAINER}:v${MAJOR}
            docker tag ghcr.io/smashingtags/${CONTAINER}:latest ghcr.io/smashingtags/${CONTAINER}:v${MAJOR}.${MINOR}
            
            # Push all tags
            docker push ghcr.io/smashingtags/${CONTAINER}:v${VERSION}
            docker push ghcr.io/smashingtags/${CONTAINER}:v${MAJOR}
            docker push ghcr.io/smashingtags/${CONTAINER}:v${MAJOR}.${MINOR}
          done
          
      - name: Send Discord notification
        if: always()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          VERSION: ${{ needs.release-please.outputs.release_version }}
        run: |
          TIMESTAMP=$(date -u +'%FT%T.%3NZ')
          json='{
            "username": "HomelabARR Release Bot",
            "avatar_url": "https://raw.githubusercontent.com/smashingtags/homelabarr-cli/main/wiki/overrides/img/profile.png",
            "embeds": [{
              "author": {
                "name": "smashingtags",
                "icon_url": "https://avatars.githubusercontent.com/u/45863998"
              },
              "title": "HomelabARR Containers Release v'"${VERSION}"'",
              "url": "https://github.com/smashingtags/homelabarr-containers/releases/tag/v'"${VERSION}"'",
              "color": 3066993,
              "fields": [
                {
                  "name": "Version Released",
                  "value": "v'"${VERSION}"'"
                },
                {
                  "name": "Release Notes",
                  "value": "Check the release page for detailed changes"
                },
                {
                  "name": "Container Tags",
                  "value": "All containers tagged with:\n• `v'"${VERSION}"'`\n• `v'"${MAJOR}"'`\n• `v'"${MAJOR}.${MINOR}"'`\n• `latest`"
                }
              ],
              "footer": {
                "text": "Powered by GitHub Actions",
                "icon_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
              },
              "timestamp": "'"${TIMESTAMP}"'"
            }]
          }'
          if [ -n "${DISCORD_WEBHOOK}" ]; then
            curl -fsSL -H "Content-Type: application/json" -X POST -d "${json}" "${DISCORD_WEBHOOK}" || true
          fi