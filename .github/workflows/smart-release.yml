name: Smart Release (Change Detection)

on:
  push:
    branches: [ main ]
    paths:
      - 'apps/**'
      - 'base/**'
      - 'mod/**'
      - '.github/workflows/smart-release.yml'
  workflow_dispatch:
    inputs:
      force_all:
        description: 'Build all containers (ignore change detection)'
        required: false
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: smashingtags

jobs:
  detect-changes:
    name: Detect Changed Containers
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      has_changes: ${{ steps.set-matrix.outputs.has_changes }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: dorny/paths-filter@v2
        with:
          list-files: json
          filters: |
            apps:
              - 'apps/**'
            base:
              - 'base/**'
            mod:
              - 'mod/**'

      - name: Process changes and create matrix
        id: set-matrix
        run: |
          # Initialize arrays
          declare -a changed_containers

          # Function to extract container name from path
          get_container_name() {
            echo "$1" | cut -d'/' -f2
          }

          # Check if force_all is set
          if [[ "${{ github.event.inputs.force_all }}" == "true" ]]; then
            echo "Force build all containers requested"

            # Get all containers
            for dir in apps base mod; do
              if [ -d "$dir" ]; then
                for container in $(find $dir -maxdepth 1 -mindepth 1 -type d -exec basename {} \;); do
                  changed_containers+=("{\"name\":\"$container\",\"category\":\"$dir\"}")
                done
              fi
            done
          else
            # Process changed files from each category
            if [[ "${{ steps.changed-files.outputs.apps }}" == "true" ]]; then
              for file in $(echo '${{ steps.changed-files.outputs.apps_files }}' | jq -r '.[]'); do
                container=$(get_container_name "$file")
                if [[ ! " ${changed_containers[@]} " =~ "\"$container\"" ]]; then
                  changed_containers+=("{\"name\":\"$container\",\"category\":\"apps\"}")
                fi
              done
            fi

            if [[ "${{ steps.changed-files.outputs.base }}" == "true" ]]; then
              for file in $(echo '${{ steps.changed-files.outputs.base_files }}' | jq -r '.[]'); do
                container=$(get_container_name "$file")
                if [[ ! " ${changed_containers[@]} " =~ "\"$container\"" ]]; then
                  changed_containers+=("{\"name\":\"$container\",\"category\":\"base\"}")
                fi
              done
            fi

            if [[ "${{ steps.changed-files.outputs.mod }}" == "true" ]]; then
              for file in $(echo '${{ steps.changed-files.outputs.mod_files }}' | jq -r '.[]'); do
                container=$(get_container_name "$file")
                if [[ ! " ${changed_containers[@]} " =~ "\"$container\"" ]]; then
                  changed_containers+=("{\"name\":\"$container\",\"category\":\"mod\"}")
                fi
              done
            fi
          fi

          # Create matrix JSON
          if [ ${#changed_containers[@]} -eq 0 ]; then
            echo "No containers changed"
            echo "matrix={\"include\":[]}" >> $GITHUB_OUTPUT
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changed containers: ${changed_containers[@]}"
            # Create proper JSON array from the changed_containers
            matrix_json=$(printf '%s,' "${changed_containers[@]}" | sed 's/,$//')
            matrix_json="{\"include\":[$matrix_json]}"
            echo "Matrix JSON: $matrix_json"
            echo "matrix=$matrix_json" >> $GITHUB_OUTPUT
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

  build-changed:
    name: Build ${{ matrix.name }}
    needs: detect-changes
    if: needs.detect-changes.outputs.has_changes == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: smashingtags
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get container metadata
        id: prep
        run: |
          # Get version and description from release.json if it exists
          if [ -f "./${{ matrix.category }}/${{ matrix.name }}/release.json" ]; then
            VERSION=$(jq -r '.newversion' ./${{ matrix.category }}/${{ matrix.name }}/release.json)
            DESCRIPTION=$(jq -r '.description' ./${{ matrix.category }}/${{ matrix.name }}/release.json)
          else
            VERSION="latest"
            case "${{ matrix.category }}" in
              apps) DESCRIPTION="HomelabARR Application Container" ;;
              base) DESCRIPTION="HomelabARR Base Image" ;;
              mod) DESCRIPTION="HomelabARR Docker Modification" ;;
              *) DESCRIPTION="HomelabARR Container" ;;
            esac
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "description=$DESCRIPTION" >> $GITHUB_OUTPUT
          echo "created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
          echo "sha_short=${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT

          # Determine container type for message
          case "${{ matrix.category }}" in
            apps) echo "type=application" >> $GITHUB_OUTPUT ;;
            base) echo "type=base image" >> $GITHUB_OUTPUT ;;
            mod) echo "type=Docker mod" >> $GITHUB_OUTPUT ;;
          esac

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.name }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ steps.prep.outputs.version }}
            type=raw,value=v${{ steps.prep.outputs.version }}
            type=sha,prefix={{branch}}-
            type=ref,event=branch
          labels: |
            org.opencontainers.image.title=${{ matrix.name }}
            org.opencontainers.image.description=${{ steps.prep.outputs.description }}
            org.opencontainers.image.vendor=HomelabARR
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./${{ matrix.category }}/${{ matrix.name }}/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ steps.prep.outputs.version }}

      - name: Send Discord notification
        if: always() && (steps.build.outcome == 'success')
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          TIMESTAMP=$(date -u +'%FT%T.%3NZ')
          json='{
            "username": "HomelabARR Smart Build",
            "avatar_url": "https://raw.githubusercontent.com/smashingtags/homelabarr-cli/main/wiki/overrides/img/profile.png",
            "embeds": [{
              "author": {
                "name": "smashingtags",
                "icon_url": "https://avatars.githubusercontent.com/u/45863998"
              },
              "title": "${{ matrix.name }}",
              "url": "https://github.com/smashingtags/homelabarr-containers/pkgs/container/${{ matrix.name }}",
              "color": 3066993,
              "fields": [
                {
                  "name": "Container Info",
                  "value": "Updated ${{ steps.prep.outputs.type }}: `${{ matrix.name }}`"
                },
                {
                  "name": "Description",
                  "value": "${{ steps.prep.outputs.description }}"
                },
                {
                  "name": "Version",
                  "value": "`${{ steps.prep.outputs.version }}` • `${{ steps.prep.outputs.sha_short }}`"
                },
                {
                  "name": "Docker Tags",
                  "value": "`ghcr.io/smashingtags/${{ matrix.name }}:latest`\n`ghcr.io/smashingtags/${{ matrix.name }}:${{ steps.prep.outputs.version }}`"
                },
                {
                  "name": "Build Type",
                  "value": "Smart Build (Changed Files Detected)"
                }
              ],
              "footer": {
                "text": "Smart Release • GitHub Actions",
                "icon_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
              },
              "timestamp": "'"${TIMESTAMP}"'"
            }]
          }'
          if [ -n "${DISCORD_WEBHOOK}" ]; then
            curl -fsSL -H "Content-Type: application/json" -X POST -d "${json}" "${DISCORD_WEBHOOK}" || true
          fi

  summary:
    name: Build Summary
    needs: [detect-changes, build-changed]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Summary
        run: |
          if [[ "${{ needs.detect-changes.outputs.has_changes }}" == "true" ]]; then
            echo "✅ Smart build completed - only changed containers were built"
          else
            echo "ℹ️ No changes detected - no containers were built"
          fi