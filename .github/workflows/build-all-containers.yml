name: Build and Publish All HomelabARR Containers

on:
  push:
    branches: [ main ]
    paths:
      - 'apps/**'
      - 'base/**'
      - 'mod/**'
      - 'nightly/**'
      - '.github/workflows/build-all-containers.yml'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: smashingtags

jobs:
  build-apps:
    needs: [build-base, build-mods]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        container:
          - homelabarr-auto-replyarr
          # Build all other containers first
          - homelabarr-backup
          - homelabarr-crunchy
          - homelabarr-crunchydl
          - homelabarr-hlupdater
          - homelabarr-gdsa
          - homelabarr-gui
          - homelabarr-local-persist
          - homelabarr-mount
          - homelabarr-newznab
          - homelabarr-restic
          - homelabarr-spotweb
          - homelabarr-traktarr
          - homelabarr-uploader
          - homelabarr-vnstat
          - homelabarr-wiki
          # Rollarr last due to potential build issues
          - homelabarr-rollarr
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: smashingtags
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.container }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix=v-
          labels: |
            org.opencontainers.image.title=${{ matrix.container }}
            org.opencontainers.image.description=HomelabARR Application - ${{ matrix.container }}
            org.opencontainers.image.vendor=HomelabARR CLI
            org.opencontainers.image.licenses=MIT
      
      - name: Set platform for build
        id: platform
        run: |
          # GDSA uses Google Cloud SDK which doesn't support ARM64
          if [ "${{ matrix.container }}" = "homelabarr-gdsa" ]; then
            echo "platforms=linux/amd64" >> $GITHUB_OUTPUT
          else
            echo "platforms=linux/amd64,linux/arm64" >> $GITHUB_OUTPUT
          fi
      
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/${{ matrix.container }}/Dockerfile
          platforms: ${{ steps.platform.outputs.platforms }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      
      - name: Send Discord notification
        if: always() && (steps.build.outcome == 'success')
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          CONTAINER: ${{ matrix.container }}
        run: |
          # Get the latest version tag
          LATEST_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          TIMESTAMP=$(date -u +'%FT%T.%3NZ')
          json='{
            "username": "HomelabARR Container Bot",
            "avatar_url": "https://raw.githubusercontent.com/smashingtags/homelabarr-cli/main/wiki/overrides/img/profile.png",
            "embeds": [{
              "author": {
                "name": "smashingtags",
                "icon_url": "https://avatars.githubusercontent.com/u/45863998"
              },
              "title": "'"${CONTAINER}"'",
              "url": "https://github.com/smashingtags/homelabarr-containers/pkgs/container/'"${CONTAINER}"'",
              "color": 3066993,
              "fields": [
                {
                  "name": "Container Info",
                  "value": "We published a new container image `'"${CONTAINER}"'`"
                },
                {
                  "name": "Description",
                  "value": "HomelabARR Application Container"
                },
                {
                  "name": "Version",
                  "value": "'"${LATEST_VERSION}"' • latest • '"${GITHUB_SHA:0:7}"'"
                },
                {
                  "name": "Docker Tags",
                  "value": "`ghcr.io/smashingtags/'"${CONTAINER}"':latest`\n`ghcr.io/smashingtags/'"${CONTAINER}"':'"${LATEST_VERSION}"'`"
                },
                {
                  "name": "Thanks!",
                  "value": "Thanks to all Contributors"
                }
              ],
              "footer": {
                "text": "Powered by GitHub Actions",
                "icon_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
              },
              "timestamp": "'"${TIMESTAMP}"'"
            }]
          }'
          if [ -n "${DISCORD_WEBHOOK}" ]; then
            curl -fsSL -H "Content-Type: application/json" -X POST -d "${json}" "${DISCORD_WEBHOOK}" || true
          fi

  build-base:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        container:
          # Build problematic containers first for easier debugging
          - homelabarr-ubuntu-focal
          - homelabarr-ubuntu-jammy
          # Then the rest
          - alpine
          - homelabarr-alpine
          - homelabarr-alpine-v3
          - homelabarr-config
          - homelabarr-create
          - homelabarr-legacy-base
          - homelabarr-ubuntu-noble
          - ubuntu
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: smashingtags
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.container }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix=v-
          labels: |
            org.opencontainers.image.title=${{ matrix.container }}
            org.opencontainers.image.description=HomelabARR Base Image - ${{ matrix.container }}
            org.opencontainers.image.vendor=HomelabARR CLI
            org.opencontainers.image.licenses=MIT
      
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./base/${{ matrix.container }}/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=22.04
      
      - name: Send Discord notification
        if: always() && (steps.build.outcome == 'success')
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          CONTAINER: ${{ matrix.container }}
        run: |
          # Get the latest version tag
          LATEST_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          TIMESTAMP=$(date -u +'%FT%T.%3NZ')
          json='{
            "username": "HomelabARR Container Bot",
            "avatar_url": "https://raw.githubusercontent.com/smashingtags/homelabarr-cli/main/wiki/overrides/img/profile.png",
            "embeds": [{
              "author": {
                "name": "smashingtags",
                "icon_url": "https://avatars.githubusercontent.com/u/45863998"
              },
              "title": "'"${CONTAINER}"'",
              "url": "https://github.com/smashingtags/homelabarr-containers/pkgs/container/'"${CONTAINER}"'",
              "color": 3066993,
              "fields": [
                {
                  "name": "Container Info",
                  "value": "We published a new base image `'"${CONTAINER}"'`"
                },
                {
                  "name": "Description",
                  "value": "HomelabARR Base Image"
                },
                {
                  "name": "Version",
                  "value": "'"${LATEST_VERSION}"' • latest • '"${GITHUB_SHA:0:7}"'"
                },
                {
                  "name": "Docker Tags",
                  "value": "`ghcr.io/smashingtags/'"${CONTAINER}"':latest`\n`ghcr.io/smashingtags/'"${CONTAINER}"':'"${LATEST_VERSION}"'`"
                },
                {
                  "name": "Thanks!",
                  "value": "Thanks to all Contributors"
                }
              ],
              "footer": {
                "text": "Powered by GitHub Actions",
                "icon_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
              },
              "timestamp": "'"${TIMESTAMP}"'"
            }]
          }'
          if [ -n "${DISCORD_WEBHOOK}" ]; then
            curl -fsSL -H "Content-Type: application/json" -X POST -d "${json}" "${DISCORD_WEBHOOK}" || true
          fi

  build-mods:
    needs: build-base
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        container:
          - homelabarr-mod-healthcheck
          - homelabarr-mod-nzbget
          - homelabarr-mod-qbittorrent
          - homelabarr-mod-rclone
          - homelabarr-mod-sabnzbd
          - homelabarr-mod-storagecheck
          - homelabarr-mod-tautulli
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: smashingtags
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.container }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix=v-
          labels: |
            org.opencontainers.image.title=${{ matrix.container }}
            org.opencontainers.image.description=HomelabARR Docker Mod - ${{ matrix.container }}
            org.opencontainers.image.vendor=HomelabARR CLI
            org.opencontainers.image.licenses=MIT
      
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./mod/${{ matrix.container }}/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      
      - name: Send Discord notification
        if: always() && (steps.build.outcome == 'success')
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          CONTAINER: ${{ matrix.container }}
        run: |
          # Get the latest version tag
          LATEST_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          TIMESTAMP=$(date -u +'%FT%T.%3NZ')
          json='{
            "username": "HomelabARR Container Bot",
            "avatar_url": "https://raw.githubusercontent.com/smashingtags/homelabarr-cli/main/wiki/overrides/img/profile.png",
            "embeds": [{
              "author": {
                "name": "smashingtags",
                "icon_url": "https://avatars.githubusercontent.com/u/45863998"
              },
              "title": "'"${CONTAINER}"'",
              "url": "https://github.com/smashingtags/homelabarr-containers/pkgs/container/'"${CONTAINER}"'",
              "color": 3066993,
              "fields": [
                {
                  "name": "Container Info",
                  "value": "We published a new Docker mod `'"${CONTAINER}"'`"
                },
                {
                  "name": "Description",
                  "value": "HomelabARR Docker Modification"
                },
                {
                  "name": "Version",
                  "value": "'"${LATEST_VERSION}"' • latest • '"${GITHUB_SHA:0:7}"'"
                },
                {
                  "name": "Docker Tags",
                  "value": "`ghcr.io/smashingtags/'"${CONTAINER}"':latest`\n`ghcr.io/smashingtags/'"${CONTAINER}"':'"${LATEST_VERSION}"'`"
                },
                {
                  "name": "Thanks!",
                  "value": "Thanks to all Contributors"
                }
              ],
              "footer": {
                "text": "Powered by GitHub Actions",
                "icon_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
              },
              "timestamp": "'"${TIMESTAMP}"'"
            }]
          }'
          if [ -n "${DISCORD_WEBHOOK}" ]; then
            curl -fsSL -H "Content-Type: application/json" -X POST -d "${json}" "${DISCORD_WEBHOOK}" || true
          fi

  build-nightly:
    needs: build-base
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        container:
          - homelabarr-whisparr-nightly
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: smashingtags
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.container }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=nightly,enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=${{ matrix.container }}
            org.opencontainers.image.description=HomelabARR Nightly Build - ${{ matrix.container }}
            org.opencontainers.image.vendor=HomelabARR CLI
            org.opencontainers.image.licenses=MIT
      
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./nightly/${{ matrix.container }}/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      
      - name: Send Discord notification
        if: always() && (steps.build.outcome == 'success')
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          CONTAINER: ${{ matrix.container }}
        run: |
          # Get the latest version tag
          LATEST_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          TIMESTAMP=$(date -u +'%FT%T.%3NZ')
          json='{
            "username": "HomelabARR Container Bot",
            "avatar_url": "https://raw.githubusercontent.com/smashingtags/homelabarr-cli/main/wiki/overrides/img/profile.png",
            "embeds": [{
              "author": {
                "name": "smashingtags",
                "icon_url": "https://avatars.githubusercontent.com/u/45863998"
              },
              "title": "'"${CONTAINER}"'",
              "url": "https://github.com/smashingtags/homelabarr-containers/pkgs/container/'"${CONTAINER}"'",
              "color": 3066993,
              "fields": [
                {
                  "name": "Container Info",
                  "value": "We published a new nightly build `'"${CONTAINER}"'`"
                },
                {
                  "name": "Description",
                  "value": "HomelabARR Nightly Build"
                },
                {
                  "name": "Version",
                  "value": "nightly • '"${GITHUB_SHA:0:7}"'"
                },
                {
                  "name": "Docker Tags",
                  "value": "`ghcr.io/smashingtags/'"${CONTAINER}"':nightly`\n`ghcr.io/smashingtags/'"${CONTAINER}"':latest`"
                },
                {
                  "name": "Thanks!",
                  "value": "Thanks to all Contributors"
                }
              ],
              "footer": {
                "text": "Powered by GitHub Actions",
                "icon_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
              },
              "timestamp": "'"${TIMESTAMP}"'"
            }]
          }'
          if [ -n "${DISCORD_WEBHOOK}" ]; then
            curl -fsSL -H "Content-Type: application/json" -X POST -d "${json}" "${DISCORD_WEBHOOK}" || true
          fi